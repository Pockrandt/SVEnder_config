[server]
host: 0.0.0.0
port: 7125


[file_manager]
enable_object_processing: True
# Configure the file manager to queue uploaded files when the "start" flag
# is set and Klipper cannot immediately start the print.
queue_gcode_uploads: True

# Configure the Job Queue to start a queued print when Klipper reports as
# ready.
[job_queue]
load_on_startup: True


[data_store]
temperature_store_size: 600
gcode_store_size: 1000


[authorization]
cors_domains:
    https://my.mainsail.xyz
    http://my.mainsail.xyz
    http://*.local
    http://*.lan
trusted_clients:
    10.0.0.0/8
    127.0.0.0/8
    169.254.0.0/16
    172.16.0.0/12
    192.168.0.0/16
    FE80::/10
    ::1/128

# enables partial support of Octoprint API
[octoprint_compat]

# enables moonraker to track and store print history.
[history]

# this enables moonraker's update manager
[update_manager]

[update_manager client mainsail]
type: web
repo: meteyou/mainsail
path: ~/mainsail

[update_manager client KlipperScreen]
type: git_repo
path: ~/KlipperScreen
origin: https://github.com/jordanruthe/KlipperScreen.git
env: ~/.KlipperScreen-env/bin/python
requirements: scripts/KlipperScreen-requirements.txt
install_script: scripts/KlipperScreen-install.sh

[update_manager sonar]
type: git_repo
path: ~/sonar
origin: https://github.com/mainsail-crew/sonar.git
primary_branch: main
managed_services: sonar

# Control a relay providing power to the printer
[power printer]
type: gpio
pin: gpio16 
off_when_shutdown: True
restart_klipper_when_powered: True
initial_state: on
on_when_job_queued: true
locked_while_printing: True
bound_service: klipper

[button power_button]
type: gpio
pin: gpio03
on_press:
  {% if printer.idle_timeout.state == "Printing" %}
    {% do call_method("printer.emergency_stop") %}
  {% else %}
    # STATUS_OFF
    {% do call_method("machine.device_power.post_device", {"device": "printer", "action": "toggle"}) %}
  {% endif %}


